/******************************************************************************\
FILE:           digit_page.zm
AUTHOR:         Theo Veenker (UiL-OTS) <T.J.G.Veenker@uu.nl>
ADAPTED BY:     Chris van Run
ADAPTED BY:     MD

DESCRIPTION:    Presents a number auditory stimuli to a participant.

HISTORY:
2012-03-20 TV   Created.
2014-05-26 CvR	Adapated.
2018-05-22 MD   Adapted/Simplified (more or less rewritten).

\******************************************************************************/

import std_sound_output_device;

const string DIGIT_DIR = "/digits/";

string[..] digit_stimuli;

void append_str_arr(string[] array, string item)
{
    array.size = array.size + 1;
    array[array.size - 1] = item;
}

void init_digits(string digits)
{
    int i = 0;
    int ndigits = length(digits); 
    // clear the current digit stimuli.
    digit_stimuli.size = 0;

    while(i < ndigits) {
        string c = string(character(digits, i));
        append_str_arr(digit_stimuli, c);
        i++;
    }
}

Page digit_page
{
    on_event:init()
    {
        fill_pattern_color = TEST_PAGE_COLOR;
    }

    on_event:key_press()
    {
        handle_special_key(this, input_key, input_modifiers);
    }
    
    SoundChain stim
    {
        int nth_stimulus;

        // Sound source/producer object.
        SoundFile clip {}

        // Sound sink/consumer object.
        SoundPlayback playback {}

        on_event:init()
        {
            clear();
        }

        void clear()
        {
            nth_stimulus = 0;
        }

        void sound(string digit)
        {
            string sndfn = digit + ".wav";
            stim.clip.file = stimuli_dir() + DIGIT_DIR + sndfn;
            stim.playback.device = sound_output_device;
            stim.start();
        }

        void start_stimulus(time starttime)
        {
            if (nth_stimulus >= digit_stimuli.size || nth_stimulus < 0) {
                print_error("digit_page.stim.nth_stimulus is wrong \"" +
                    nth_stimulus + "\"\n"
                    "Consult your lab support\n"
                    );
                return;
            }
            string fn = stimuli_dir() + DIGIT_DIR +
                        digit_stimuli[nth_stimulus]+ ".wav";
            stim.clip.file = fn;
            stim.playback.device = sound_output_device;
        }


        // start next stimulus or be done.
        on_event:finish()
        {
            nth_stimulus++;
            if (nth_stimulus < digit_stimuli.size) {
                start(finish_time + DIGIT_ISI);
            }
            else {
                done(CONTINUE);
            }
        }
    }

    //==========================================================================

    // Aborts any ongoing activity on this page and signals the initiator
    // of the trial that we're done.
    void done(int msgid)
    {
        stim.clear();
        signal_target(msgid);   // tell caller we're done
        target = null;

        control.clear_status();
    }

    // Performs preparatory work required before using this page.
    void setup(
            int     ntrials      = -1,
            bool    fb           = false,
            bool    pr           = false,
            string  overlay_text = "type in digits in given order"
            )
    {
        test_page_overlay.setup(this);
        // Show or hide prompt.
        test_page_overlay.show_prompt(pr ?
             overlay_text : "");

        // Enable or disable the progress bar.
        test_page_overlay.show_progress_bar(ntrials);   // disabled if < 0

        // Enable or disable feedback.
        test_page_overlay.enable_feedback(fb);          // disabled if false
    }

    // Performs cleaning up if necessary.
    void cleanup()
    {
        test_page_overlay.cleanup();
        stim.clear();
    }

    // Starts a trial.
    void action(Object caller, string digits, time tref)
    {
        // Show this page (if not yet done) and make tref the trial start time.
        tref = test_window1.show_test_page(this, tref + INTERTRIAL_INTERVAL);

        stim.clear();

        // Start the auditory stimulus.
        stim.start_stimulus(tref);

        // Update status line on control window. Cleared in done() above.
        control.set_status(
            string("Digits for digit span"));

        // Remember who to signal when the trial is over.
        target = caller;
    }
}

